Week 1 
Installation and Get started 
git --version :    Verify that Git is installed
git : Overall Git help at command line
git help <command>  : for example : git help commit
git config user.name : View the current setting of username
git config --global user.name "Your name" : Set your user name
git config user.email : View the current setting of email
git config --global user.email "your@email.com" : Set your email address

Initialize a Git repository 
mkdir repos : Create a directory called "repos"
cd repos : Change directory to "repos"
git init : Initialize a repository  

Commit to Local Repository
git status : View file status, the newly created files are 'untracked' 
git add : Adds the file to the staged area
git commit -m "A message comes here" : Add the staged file to the local repo
git log : Shows the commit details of the project
git log --oneline : Concise version of the history

Steps for Cloning a remote repo:
git clone <https address of the repository in Github or Bitbucket> : Clone a remote repository
ls -a : Shows all the directories including hidden ones in the current directory
git remote -v : Shows the URL of the remote repository 

Pushing the changes of local repo to the remote repo:
git push -u origin master : Origin is the name of the remote repository, master is the default branch that we want to push 

Week 2 :
Show details of commit objects:
git log --oneline : Shows the concise list of commit objects(can be used in the next command)
git show <SHA-1(hash number of a commit)> : Shows the details of the specified commit

git branch --list : Shows the list of branches in the project

Manage tags:
tag(definition):Git has the ability to tag specific points in a repository's history as being important.
Typically, people use this functionality to mark release points(v1.0 , v2.0 and so on)
git tag : Shows the tags of the project
git tag -a -m "your message here" <name of the tag> : (-a for annotated tag , -m : message )
git show <name of the tag> : Shows the tag information & its associated commit(most recent commit on the HEAD)
git push origin <name of the tag> : Pushes the mentioned tag to the remote repository
git tag -a -m "message comes here" <name of the tag> HAED~ : creates a tag & associate it with the parent commit of the recent commit on the HEAD
git tag -d <name of the tag> : Delete a tag on the repo

Branch:
git branch <branch1> : Creates a branch called branch1
git checkout <branch1> : Checkouts the aformentioned branch(branch)
== git checkout -b <branch1> : this command executes the two previous command at once
git log --oneline : HEAD -> branch1 : this shows that the branch1 is currently checkedout and active(any new commit will be on this branch)
git branch : Shows the existing branches in a project and adds a * to the left of the checked out branch name
git branch -d <branch name>: delete a branch(When changes have been merged)
git branch -D <branch name>: Forces deleting the branch although the changes have not been merged
   Undo deleting a branch:
git reflog : Shows the local history of HEAD references -->> find & copy the SHA-1 of the most recent deleted branch name 
git checkout -b <branch name> [SHA-1 YOU COPIED] : Returns the deleted branch -->> Check the git log to make sure the branch is back














Tracking Branches:
If we create a remote repository with at least one commit, the tracking branch is automatically set up. 
git branch --all : Shows the local and tracking branch names
git log --all --oneline --graph : Shows the full log of all local & tracking branches











Manage merge confllict:
git merge <branch1> : Merges the branch1 with the current checkedout branch of the project. If the two branches had changed the same hunck of the same file, a conflict will appear.
When a conflict occurs : One possible approach is to abort: 
git merge --abort : Abort the merge process
The other approach involves editing the file containing conflict and the add, commit so the merge process can be completed.




















